generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum CategoryType {
  EXPENSE
  INCOME
}

enum LimitType {
  TOTAL
  MONTHLY
}

model User {
  id             String    @id @default(uuid())
  addressId      String?   @unique
  fileId         String?
  name           String
  document       String    @unique
  email          String    @unique
  phone          String    @unique
  birthDate      DateTime
  balance        Float     @default(0)
  password       String
  role           UserRole
  status         String
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  Tag          Tag[]
  files        File[]
  Center       Center[]
  Method       Method[]
  settings     Setting[]
  Account      Account[]
  categories   Category[]
  userTokens   UserToken[]
  transactions Transaction[]

  address Address? @relation(fields: [addressId], references: [id])

  @@map("users")
}

model Setting {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  fieldName       String    @map("field_name")
  isFieldEnable   Boolean   @map("is_field_enable")
  isFieldRequired Boolean   @map("is_field_required")
  title           String
  description     String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model Category {
  id            String       @id @default(uuid())
  userId        String
  transactionId String?      @unique
  type          CategoryType
  name          String       @unique
  subcategoryOf String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("categories")
}

model Tag {
  id        String    @id @default(uuid())
  userId    String
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("tags")
}

model Center {
  id        String    @id @default(uuid())
  userId    String
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("centers")
}

model Method {
  id        String    @id @default(uuid())
  userId    String
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("methods")
}

model Account {
  id                  String     @id @default(uuid())
  userId              String
  accountType         String
  name                String     @unique
  currency            String
  logo                String?
  limit               Float?
  limitType           LimitType?
  dueDateDay          String?
  dueDateFirstInvoice DateTime?
  closingDateInvoice  Int?
  balanceFirstInvoice Float?
  isFirstInvoice      Boolean?
  isCreditCard        Boolean?
  initialBalance      Float
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  deletedAt           DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("accounts")
}

model Transaction {
  id             String    @id @default(uuid())
  type           String
  date           DateTime
  amount         Float
  description    String
  status         String
  card           String?
  contact        String?
  project        String?
  documentNumber String?
  notes          String?
  competenceDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  userId String
  user   User?  @relation(fields: [userId], references: [id])

  accountId String
  account   Account? @relation(fields: [accountId], references: [id])

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  centerId String?
  center   Center? @relation(fields: [centerId], references: [id])

  methodId String?
  method   Method? @relation(fields: [methodId], references: [id])

  tagId String?
  tag   Tag?    @relation(fields: [tagId], references: [id])

  @@map("transactions")
}

model UserToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique @db.Uuid
  code      String
  usage     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("users_tokens")
}

model File {
  id          String    @id @default(cuid())
  userId      String    @unique
  path        String
  name        String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("files")
}

model Address {
  id           String    @id @default(uuid())
  userId       String    @unique
  zipCode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user User?

  @@map("addresses")
}
