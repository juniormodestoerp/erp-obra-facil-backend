generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String    @id @default(uuid())
  addressId String?
  fileId    String?
  name      String
  document  String    @unique
  email     String    @unique
  phone     String    @unique
  birthDate DateTime
  password  String
  role      UserRole
  status    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  userTokens   UserToken[]
  settings     Setting[]
  categories   Category[]
  transactions Transaction[]
  address      Address?      @relation(fields: [addressId], references: [id])
  file         File?         @relation(fields: [fileId], references: [id])

  @@map("users")
}

model Setting {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  fieldName       String    @map("field_name")
  isFieldEnable   Boolean   @map("is_field_enable")
  isFieldRequired Boolean   @map("is_field_required")
  title           String
  description     String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model Category {
  id          String    @id @default(uuid())
  categoryId  String?   @map("categories_id")
  userId      String    @map("user_id")
  name        String    @unique
  subcategory String?
  type        String
  model       String
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  relatedCategories Category[] @relation("ParentChild")

  user         User          @relation(fields: [userId], references: [id])
  categories   Category?     @relation("ParentChild", fields: [categoryId], references: [id])
  transactions Transaction[]

  @@map("categories")
}

model Transaction {
  id                String   @id @default(uuid())
  userId            String   @map("user_id")
  fitId             String   @map("fit_id")
  trnType           String   @map("trn_type")
  name              String
  description       String
  categoryId        String   @map("category_id")
  establishmentName String   @map("establishment_name")
  bankName          String   @map("bank_name")
  transactionDate   DateTime @map("transaction_date")
  previousBalance   Float    @map("previous_balance")
  totalAmount       Float    @map("total_amount")
  currentBalance    Float    @map("current_balance")
  paymentMethod     String   @map("payment_method")
  status            String

  competencyDate       DateTime? @map("competency_date")
  costAndProfitCenters String?   @map("cost_center")
  tags                 String?   @map("tags")
  documentNumber       String?   @map("document_number")
  associatedContracts  String?   @map("associated_contracts")
  associatedProjects   String?   @map("associated_projects")
  additionalComments   String?   @map("additional_comments")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@map("transactions")
}

model UserToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique @db.Uuid
  code      String
  usage     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("users_tokens")
}

model File {
  id          String    @id @default(cuid())
  userId      String    @unique
  path        String
  name        String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  User        User[]

  @@map("files")
}

model Address {
  id           String    @id @default(uuid())
  userId       String    @unique
  zipCode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  User         User[]

  @@map("addresses")
}
