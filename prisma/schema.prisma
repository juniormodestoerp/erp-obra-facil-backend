generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum CategoryType {
  RECEIPT
  INCOME
}

model User {
  id             String    @id @default(uuid())
  addressId      String?   @unique
  fileId         String?
  name           String
  document       String    @unique
  email          String    @unique
  phone          String    @unique
  birthDate      DateTime
  balance        Float     @default(0)
  password       String
  role           UserRole
  status         String
  profilePicture String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  address       Address?        @relation(fields: [addressId], references: [id])
  categories    Category[]
  files         File[]
  settings      Setting[]
  userTokens    UserToken[]
  transactions  Transaction[]
  BankAccount   BankAccount[]
  Tag           Tag[]
  PaymentMethod PaymentMethod[]

  @@map("users")
}

model Setting {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  fieldName       String    @map("field_name")
  isFieldEnable   Boolean   @map("is_field_enable")
  isFieldRequired Boolean   @map("is_field_required")
  title           String
  description     String
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at")

  user User @relation(fields: [userId], references: [id])

  @@map("settings")
}

model Category {
  id            String       @id @default(uuid())
  userId        String
  transactionId String?      @unique
  type          CategoryType
  name          String
  subcategoryOf String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("categories")
}

model BankAccount {
  id             String    @id @default(uuid())
  userId         String
  name           String
  currency       String
  logo           String
  initialBalance Float
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?

  transactions Transaction[]

  user User @relation(fields: [userId], references: [id])

  @@map("bank_accounts")
}

model Transfer {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  transferOption TransferOption[]

  @@map("transfers")
}

model Tag {
  id        String    @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("tags")
}

model PaymentMethod {
  id        String    @id @default(uuid())
  userId    String
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("payment_methods")
}

model TransferOption {
  id                 String    @id @default(uuid())
  transactionId      String
  transferId         String
  sourceAccount      String
  destinationAccount String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  transfer Transfer @relation(fields: [transferId], references: [id])

  @@map("transfer_options")
}

model Transaction {
  id                String   @id @default(uuid())
  userId            String
  fitId             String
  accountType       String
  name              String
  description       String
  categoryId        String?
  establishmentName String
  bankName          String
  transactionDate   DateTime
  previousBalance   Float
  totalAmount       Float
  currentBalance    Float
  paymentMethod     String
  status            String

  competencyDate       DateTime?
  costAndProfitCenters String?
  tags                 String?
  documentNumber       String?
  associatedContracts  String?
  associatedProjects   String?
  additionalComments   String?
  accountToTransfer    String?
  contact              String?
  card                 String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user          User?        @relation(fields: [userId], references: [id])
  category      Category?    @relation(fields: [categoryId], references: [id])
  BankAccount   BankAccount? @relation(fields: [bankAccountId], references: [id])
  bankAccountId String?

  @@map("transactions")
}

model UserToken {
  id        String    @id @default(uuid())
  userId    String
  token     String    @unique @db.Uuid
  code      String
  usage     Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("users_tokens")
}

model File {
  id          String    @id @default(cuid())
  userId      String    @unique
  path        String
  name        String
  contentType String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  user User @relation(fields: [userId], references: [id])

  @@map("files")
}

model Address {
  id           String    @id @default(uuid())
  userId       String    @unique
  zipCode      String
  state        String
  city         String
  neighborhood String
  street       String
  number       String
  complement   String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  user User?

  @@map("addresses")
}
